############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
variable_startprint_actions: "bed_soak", "extruder_preheating", "chamber_soak", "tilt_calib", "z_offset", "bedmesh", "extruder_heating", "purge", "clean", "primeline"
variable_chamber_temperature_sensor_enabled: True
variable_chamber_temperature_sensor_name: "Chamber"
gcode: # do not remove this line

#-------------------------#
#      KINEMATICS         #
#-------------------------#

[printer]
kinematics: limited_corexy
max_velocity: 300
max_x_accel: 10000
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the x axis. It limits the acceleration of the x stepper motor. The
#   default is to use max_accel for max_x_accel.
max_y_accel: 10000
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the y axis. It limits the acceleration of the y stepper motor. The
#   default is to use max_accel for max_y_accel.
max_z_accel: 350
max_z_velocity: 20
max_accel: 10000
#   In order to get maximum acceleration gains on diagonals, this should be
#   equal or greater than the hypotenuse (sqrt(x*x + y*y)) of max_x_accel and
#   max_y_accel.
scale_xy_accel: True
#   If scale_xy_accel is False, `max_accel`, set by M204 or SET_VELOCITY_LIMIT,
#   acts as a third limit. This means that moves with an acceleration lower
#   than max_x_accel and max_y_accel, have no per-axis limits applied. When set
#   to True, max_x_accel and max_y_accel are scaled by the ratio of the
#   acceleration set at runtime and the max_accel value from the config. Then
#   the actual acceleration will always depend on the orientation.
square_corner_velocity: 8.0

#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
[extruder]
rotation_distance: 47.088
gear_ratio: 9:1             ## for Galileo 2
microsteps: 16
nozzle_diameter: 0.4
filament_diameter: 1.750
# control: pid
# pid_kp = 40.232
# pid_ki = 5.061
# pid_kd = 79.963
min_temp: -15
max_temp: 300
max_extrude_only_distance: 1400.0
max_extrude_only_velocity: 75.0
max_extrude_only_accel: 1500

[tmc2209 extruder]
run_current: 0.6

[heater_bed]
heater_pin: BED_HEATER
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: BED_TEMPERATURE
max_power: 1
min_temp: -15
max_temp: 120
pwm_cycle_time: 0.01667            ## Sync to 60hz for N. America
# control: pid
# pid_kp = 44.240
# pid_ki = 1.482
# pid_kd = 330.140

[temperature_sensor toolhead_mcu]
sensor_type: temperature_mcu
sensor_mcu: toolhead
min_temp = -15
max_temp = 100

[temperature_sensor mcu]
sensor_type = temperature_mcu
min_temp = -15
max_temp = 90

#-------------------------#
#      INPUT SHAPER       #
#-------------------------#

# [input_shaper]
# shaper_type_x: mzv
# shaper_freq_x: 72.6
# shaper_type_y: mzv
# shaper_freq_y: 58.4

#-------------------------#
#   TMC STEPPERS INIT     #
#-------------------------#
[delayed_gcode set_steppers]
initial_duration: 1
gcode:
  {% set v = 3771|int %}
  {% set thighv = 450|int %}

  SET_TMC_FIELD STEPPER=stepper_x FIELD=OVERVOLTAGE_VTH VALUE={ v }
  SET_TMC_FIELD STEPPER=stepper_x1 FIELD=OVERVOLTAGE_VTH VALUE={ v }
  SET_TMC_FIELD STEPPER=stepper_y FIELD=OVERVOLTAGE_VTH VALUE={ v }
  SET_TMC_FIELD STEPPER=stepper_y1 FIELD=OVERVOLTAGE_VTH VALUE={ v }

  SET_TMC_FIELD STEPPER=stepper_x FIELD=THIGH VELOCITY={ thighv }
  SET_TMC_FIELD STEPPER=stepper_x1 FIELD=THIGH VELOCITY={ thighv }
  SET_TMC_FIELD STEPPER=stepper_y FIELD=THIGH VELOCITY={ thighv }
  SET_TMC_FIELD STEPPER=stepper_y1 FIELD=THIGH VELOCITY={ thighv }

#-------------------------#
#        X MOTORS         #
#-------------------------#

[stepper_x]
homing_speed: 50
dir_pin: X_DIR
rotation_distance: 40
microsteps: 64
homing_retract_dist: 0

[stepper_x1]
step_pin: X1_STEP
dir_pin: X1_DIR
enable_pin: !X1_ENABLE
rotation_distance: 40
microsteps: 64
full_steps_per_rotation: 200

[tmc2240 stepper_x]
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
driver_SGT: 2   ## -64 is most sensitive value, 63 is least sensitive
run_current: 0.8
driver_SGT: 4
driver_TPFD: 0
driver_TBL: 0
driver_TOFF: 4
driver_HSTRT: 7
driver_HEND: 9

[tmc2240 stepper_x1]
cs_pin: X1_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
interpolate: True
run_current: 0.8
stealthchop_threshold: 0
driver_SGT: 2   ## -64 is most sensitive value, 63 is least sensitive
driver_TPFD: 0
driver_TBL: 0
driver_TOFF: 4
driver_HSTRT: 7
driver_HEND: 9

#-------------------------#
#        Y MOTORS         #
#-------------------------#

[stepper_y]
homing_speed: 50
dir_pin: Y_DIR
rotation_distance: 40
microsteps: 64
homing_retract_dist: 0

[stepper_y1]
step_pin: Y1_STEP
dir_pin: Y1_DIR
enable_pin: !Y1_ENABLE
rotation_distance: 40
microsteps: 64
full_steps_per_rotation: 200

[tmc2240 stepper_y]
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
driver_SGT: 2   ## -64 is most sensitive value, 63 is least sensitive
run_current: 0.8
driver_SGT: 4
driver_TPFD: 0
driver_TBL: 0
driver_TOFF: 4
driver_HSTRT: 7
driver_HEND: 9

[tmc2240 stepper_y1]
cs_pin: Y1_TMCUART
spi_speed: 500000
spi_software_sclk_pin: DRIVER_SPI_SCK
spi_software_mosi_pin: DRIVER_SPI_MOSI
spi_software_miso_pin: DRIVER_SPI_MISO
interpolate: True
run_current: 0.8
stealthchop_threshold: 0
driver_SGT: 2   ## -64 is most sensitive value, 63 is least sensitive
driver_TPFD: 0
driver_TBL: 0
driver_TOFF: 4
driver_HSTRT: 7
driver_HEND: 9

#-------------------------#
#   Z MOTORS DIRECTION    #
#-------------------------#

## Here is an example of some overrides for the motor directions as it's a pretty common one. If you need
## to invert the Z1 or Z3 motor direction on your machine, just uncomment the following lines.
[stepper_z]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
# endstop_pin: PG10
endstop_pin: probe:z_virtual_endstop   ## use idm as virtual endstop
homing_retract_dist: 0
position_min: -5
position_max: 260

[stepper_z1]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[stepper_z2]
step_pin: PE2
dir_pin: PE3
enable_pin: !PD4
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[stepper_z3]
step_pin: PE6
dir_pin: !PA14
enable_pin: !PE0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

#-------------------------#
#        BED MESH         #
#-------------------------#

[bed_mesh]
speed: 500
horizontal_move_z: 10
probe_count: 200, 50
mesh_min: 40, 40
mesh_max: 310, 288

#-------------------------#
#    QUAD GANTRY LEVEL    #
#-------------------------#

[quad_gantry_level]
speed: 700
horizontal_move_z: 3
retries: 10
retry_tolerance: 0.01
max_adjust: 10
#-------------------------#
#      CHAMBER LED'S      #
#-------------------------#

[output_pin caselight]
pin: MCU_FAN2
pwm:true
shutdown_value: 0
value: 1
cycle_time: 0.01

#-------------------------#
#          Fans           #
#-------------------------#

[controller_fan controller_fan]
pin: MCU_FAN0
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 0.5
off_below: 0.10
fan_speed: 0.5
idle_timeout: 120
# idle_speed: 0.50
stepper: stepper_x, stepper_z

#-------------------------#
#    CHAMBER HEATER       #
#-------------------------#

[temperature_fan chamber_heater]
sensor_type: Generic 3950
sensor_pin: CHAMBER_TEMPERATURE ## chamber_thermistor
min_temp: -15
max_temp: 70
gcode_id: chamber_heater
pin: CHAMBER_HEATER ## to chamber heater ssr
target_temp: 0
min_speed: 0
shutdown_speed: 0
control: pid
pid_Kp: 70.184
pid_Ki: 0.376
pid_Kd: 3274.071
reverse: true
cycle_time: 0.0166

[multi_pin core_fans]
pins: MCU_FAN3, MCU_FAN4
##  Meatball fan - CNC_FAN3 & CNC_FAN4
[temperature_fan chamber_heater_core]
sensor_type: Generic 3950
sensor_pin: CORE_TEMPERATURE  ## ptc_core_thermistor
min_temp: -15
max_temp: 200
gcode_id: chamber_heater_core
pin = multi_pin:core_fans
target_temp: 40
min_speed: 0.0
max_power: 1
cycle_time: 0.0166
shutdown_speed: 1
control: pid
#max_delta: 2.0
pid_Kp: 200
pid_Ki: 15
pid_Kd: 400
kick_start_time: 0.50

[gcode_macro _USER_VARIABLES]
variable_chamber_temperature_sensor_enabled: True
variable_chamber_temperature_sensor_name: "Chamber"
gcode:

# [temperature_sensor Chamber]
# sensor_type: Generic 3950
# sensor_pin: CHAMBER_TEMPERATURE

[duplicate_pin_override]
# Allow using PF4 to sense temperature for both chamber and chamber heater
pins: CHAMBER_TEMPERATURE, PF4

# [heater_generic chamber]
# gcode_id: C
# heater_pin: CHAMBER_HEATER          ## HE1
# max_power: 1.0
# sensor_type: Generic 3950
# sensor_pin: CHAMBER_TEMPERATURE    ## T0
# control: watermark
# max_delta: 1.0
# min_temp: 0
# max_temp: 60

# [verify_heater chamber]
# max_error: 300
# check_gain_time: 480
# hysteresis: 5
# heating_gain: 1

# [heater_fan chamber_fans]
# pin = multi_pin:chamber_fans
# max_power: 1.0
# shutdown_speed: 0.0
# kick_start_time: 5.0
# heater: chamber
# # heater_temp: 25
# fan_speed: 1.0

# [gcode_macro M141]
# gcode:
#    SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S}

# [gcode_macro M191]
# gcode:
#    SET_HEATER_TEMPERATURE HEATER=chamber TARGET={params.S}
#    TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={params.S}

# [axis_twist_compensation]
# speed: 50               #   The speed (in mm/s) of non-probing moves during the calibration.
# horizontal_move_z: 5    #   The height (in mm) that the head should be commanded to move 
# calibrate_start_x: 20   #   Defines the minimum X coordinate of the calibration
# calibrate_end_x: 280    #   Defines the maximum X coordinate of the calibration
# calibrate_y: 150        #   Defines the Y coordinate of the calibration

# [gcode_shell_command plot_graph]
# command: bash /home/pi/printer_data/config/scripts/plot_graphs.sh

# [gcode_shell_command system_info]
# command: python3 /home/pi/printer_data/config/scripts/system_info.py

#----------------------------------------------#
#  CONVERT TO TEMPERATURE_FAN FOR CHAMBER TEMP #
#----------------------------------------------#

# [gcode_macro _MODULE_HEATSOAK_CHAMBER]
# gcode:
#     # ----- CHAMBER HEATSOAK ----------------------------------
#     # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
#     # If there is one, the recirculating filter is also be powered on from the previous step and kept like that to act as bed fans
#     {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
#     {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}

#     {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
#     {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

#     {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

#     {% set max_x = printer.toolhead.axis_maximum.x|float %}
#     {% set max_y = printer.toolhead.axis_maximum.y|float %}

#     {% if chamber_sensor_enabled %}
#         {% if CHAMBER_TEMP > 0 %}
#             {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
#             {% set CURRENT_TEMP = printer["temperature_fan " ~ chamber_sensor_name].temperature|float %}

#             # We do a first test to validate that the chamber is not already at temperature before starting the soak
#             {% if CURRENT_TEMP <= CHAMBER_TEMP %}
#                 G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}

#                 # Start the filter (if available) to spread the heat faster in the chamber
#                 {% if filter_enabled %}
#                     START_FILTER SPEED=1
#                 {% endif %}

#                 # Wait for the temperature of the chamber to be reached (default max: 15min)
#                 HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}

#                 # Reset the filter status now that the chamber is at correct temperature
#                 {% if filter_enabled %}
#                     STOP_FILTER
#                 {% endif %}
#             {% endif %}
#         {% endif %}
#     {% endif %}

# [gcode_macro _WAIT_CHAMBER_TEMP]
# # This macro is needed to allow klipper populate a new value in the printer[...].temperature variable
# # as each variables are populated only once at the beginning of every macro call
# gcode:
#     {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}

#     {% if chamber_sensor_enabled %}
#         {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
#         {% set SETPOINT_TEMP = params.TEMP|default(0)|float %}
#         {% set CURRENT_TEMP = printer["temperature_fan " ~ chamber_sensor_name].temperature|float %}
#       BEDFANSMAX
#       START_FILTER SPEED=1
#       SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=Chamber TARGET={SETPOINT_TEMP}
#         {% if CURRENT_TEMP <= SETPOINT_TEMP %}
#             RESPOND MSG="Heating up the chamber : {CURRENT_TEMP}/{SETPOINT_TEMP}"
#             G4 P{60000 * 1} # wait a minute and check again if called in a loop
#         {% endif %}
#     {% endif %}




